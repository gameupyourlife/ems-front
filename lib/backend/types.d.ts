/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/Actions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ActionDetailedDto"];
                        "application/json": components["schemas"]["ActionDetailedDto"];
                        "text/json": components["schemas"]["ActionDetailedDto"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ActionUpdateDto"];
                    "text/json": components["schemas"]["ActionUpdateDto"];
                    "application/*+json": components["schemas"]["ActionUpdateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Actions/flow/{flowId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    flowId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ActionDto"][];
                        "application/json": components["schemas"]["ActionDto"][];
                        "text/json": components["schemas"]["ActionDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ActionCreateDto"];
                    "text/json": components["schemas"]["ActionCreateDto"];
                    "application/*+json": components["schemas"]["ActionCreateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ActionDetailedDto"];
                        "application/json": components["schemas"]["ActionDetailedDto"];
                        "text/json": components["schemas"]["ActionDetailedDto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/AgendaEntries/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AgendaEntryDto"];
                        "application/json": components["schemas"]["AgendaEntryDto"];
                        "text/json": components["schemas"]["AgendaEntryDto"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AgendaEntryUpdateDto"];
                    "text/json": components["schemas"]["AgendaEntryUpdateDto"];
                    "application/*+json": components["schemas"]["AgendaEntryUpdateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/AgendaEntries/event/{eventId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    eventId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AgendaEntryDto"][];
                        "application/json": components["schemas"]["AgendaEntryDto"][];
                        "text/json": components["schemas"]["AgendaEntryDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/AgendaEntries/upcoming": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    days?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AgendaEntryDto"][];
                        "application/json": components["schemas"]["AgendaEntryDto"][];
                        "text/json": components["schemas"]["AgendaEntryDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/AgendaEntries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AgendaEntryCreateDto"];
                    "text/json": components["schemas"]["AgendaEntryCreateDto"];
                    "application/*+json": components["schemas"]["AgendaEntryCreateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AgendaEntryDto"];
                        "application/json": components["schemas"]["AgendaEntryDto"];
                        "text/json": components["schemas"]["AgendaEntryDto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EventBasicDto"][];
                        "application/json": components["schemas"]["EventBasicDto"][];
                        "text/json": components["schemas"]["EventBasicDto"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventCreateDto"];
                    "text/json": components["schemas"]["EventCreateDto"];
                    "application/*+json": components["schemas"]["EventCreateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EventBasicDetailedDto"];
                        "application/json": components["schemas"]["EventBasicDetailedDto"];
                        "text/json": components["schemas"]["EventBasicDetailedDto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Events/upcoming": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    days?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EventBasicDto"][];
                        "application/json": components["schemas"]["EventBasicDto"][];
                        "text/json": components["schemas"]["EventBasicDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EventBasicDetailedDto"];
                        "application/json": components["schemas"]["EventBasicDetailedDto"];
                        "text/json": components["schemas"]["EventBasicDetailedDto"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventUpdateDto"];
                    "text/json": components["schemas"]["EventUpdateDto"];
                    "application/*+json": components["schemas"]["EventUpdateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Events/{id}/attendees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EventBasicDetailedDto"];
                        "application/json": components["schemas"]["EventBasicDetailedDto"];
                        "text/json": components["schemas"]["EventBasicDetailedDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Events/{id}/agenda": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EventBasicDetailedDto"];
                        "application/json": components["schemas"]["EventBasicDetailedDto"];
                        "text/json": components["schemas"]["EventBasicDetailedDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Events/{id}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EventBasicDetailedDto"];
                        "application/json": components["schemas"]["EventBasicDetailedDto"];
                        "text/json": components["schemas"]["EventBasicDetailedDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Events/organization/{organizationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    organizationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EventBasicDto"][];
                        "application/json": components["schemas"]["EventBasicDto"][];
                        "text/json": components["schemas"]["EventBasicDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Events/creator/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EventBasicDto"][];
                        "application/json": components["schemas"]["EventBasicDto"][];
                        "text/json": components["schemas"]["EventBasicDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Events/category/{category}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    category: components["schemas"]["EventCategory"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EventBasicDto"][];
                        "application/json": components["schemas"]["EventBasicDto"][];
                        "text/json": components["schemas"]["EventBasicDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Events/date-range": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    start?: string;
                    end?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EventBasicDto"][];
                        "application/json": components["schemas"]["EventBasicDto"][];
                        "text/json": components["schemas"]["EventBasicDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Events/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventStatusDto"];
                    "text/json": components["schemas"]["EventStatusDto"];
                    "application/*+json": components["schemas"]["EventStatusDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EventBasicDetailedDto"];
                        "application/json": components["schemas"]["EventBasicDetailedDto"];
                        "text/json": components["schemas"]["EventBasicDetailedDto"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Events/{id}/attendee-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": number;
                        "application/json": number;
                        "text/json": number;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Files/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileDetailedDto"];
                        "application/json": components["schemas"]["FileDetailedDto"];
                        "text/json": components["schemas"]["FileDetailedDto"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["FileUpdateDto"];
                    "text/json": components["schemas"]["FileUpdateDto"];
                    "application/*+json": components["schemas"]["FileUpdateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Files/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileDto"][];
                        "application/json": components["schemas"]["FileDto"][];
                        "text/json": components["schemas"]["FileDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Files/type/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    type: components["schemas"]["FileType"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileDto"][];
                        "application/json": components["schemas"]["FileDto"][];
                        "text/json": components["schemas"]["FileDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        /** Format: binary */
                        File: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileDetailedDto"];
                        "application/json": components["schemas"]["FileDetailedDto"];
                        "text/json": components["schemas"]["FileDetailedDto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Files/user/{userId}/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": number;
                        "application/json": number;
                        "text/json": number;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Flows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FlowBasicDto"][];
                        "application/json": components["schemas"]["FlowBasicDto"][];
                        "text/json": components["schemas"]["FlowBasicDto"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["FlowCreateDto"];
                    "text/json": components["schemas"]["FlowCreateDto"];
                    "application/*+json": components["schemas"]["FlowCreateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FlowResponseDto"];
                        "application/json": components["schemas"]["FlowResponseDto"];
                        "text/json": components["schemas"]["FlowResponseDto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Flows/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FlowResponseDto"];
                        "application/json": components["schemas"]["FlowResponseDto"];
                        "text/json": components["schemas"]["FlowResponseDto"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["FlowUpdateDto"];
                    "text/json": components["schemas"]["FlowUpdateDto"];
                    "application/*+json": components["schemas"]["FlowUpdateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Flows/{id}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FlowDetailedDto"];
                        "application/json": components["schemas"]["FlowDetailedDto"];
                        "text/json": components["schemas"]["FlowDetailedDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Flows/{id}/toggle-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["FlowStatusDto"];
                    "text/json": components["schemas"]["FlowStatusDto"];
                    "application/*+json": components["schemas"]["FlowStatusDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FlowResponseDto"];
                        "application/json": components["schemas"]["FlowResponseDto"];
                        "text/json": components["schemas"]["FlowResponseDto"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/Mail/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: {
                    to?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["OrganizationResponseDto"][];
                        "application/json": components["schemas"]["OrganizationResponseDto"][];
                        "text/json": components["schemas"]["OrganizationResponseDto"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OrganizationCreateDto"];
                    "text/json": components["schemas"]["OrganizationCreateDto"];
                    "application/*+json": components["schemas"]["OrganizationCreateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["OrganizationResponseDto"];
                        "application/json": components["schemas"]["OrganizationResponseDto"];
                        "text/json": components["schemas"]["OrganizationResponseDto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Organizations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["OrganizationResponseDto"];
                        "application/json": components["schemas"]["OrganizationResponseDto"];
                        "text/json": components["schemas"]["OrganizationResponseDto"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OrganizationUpdateDto"];
                    "text/json": components["schemas"]["OrganizationUpdateDto"];
                    "application/*+json": components["schemas"]["OrganizationUpdateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Organizations/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["OrganizationDto"][];
                        "application/json": components["schemas"]["OrganizationDto"][];
                        "text/json": components["schemas"]["OrganizationDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Organizations/{id}/member-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": number;
                        "application/json": number;
                        "text/json": number;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Triggers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["TriggerDetailedDto"];
                        "application/json": components["schemas"]["TriggerDetailedDto"];
                        "text/json": components["schemas"]["TriggerDetailedDto"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["TriggerUpdateDto"];
                    "text/json": components["schemas"]["TriggerUpdateDto"];
                    "application/*+json": components["schemas"]["TriggerUpdateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Triggers/flow/{flowId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    flowId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["TriggerDto"][];
                        "application/json": components["schemas"]["TriggerDto"][];
                        "text/json": components["schemas"]["TriggerDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Triggers/type/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    type: components["schemas"]["TriggerType"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["TriggerDto"][];
                        "application/json": components["schemas"]["TriggerDto"][];
                        "text/json": components["schemas"]["TriggerDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Triggers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["TriggerCreateDto"];
                    "text/json": components["schemas"]["TriggerCreateDto"];
                    "application/*+json": components["schemas"]["TriggerCreateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["TriggerDetailedDto"];
                        "application/json": components["schemas"]["TriggerDetailedDto"];
                        "text/json": components["schemas"]["TriggerDetailedDto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserResponseDto"][];
                        "application/json": components["schemas"]["UserResponseDto"][];
                        "text/json": components["schemas"]["UserResponseDto"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UserCreateDto"];
                    "text/json": components["schemas"]["UserCreateDto"];
                    "application/*+json": components["schemas"]["UserCreateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserResponseDto"];
                        "application/json": components["schemas"]["UserResponseDto"];
                        "text/json": components["schemas"]["UserResponseDto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserResponseDto"];
                        "application/json": components["schemas"]["UserResponseDto"];
                        "text/json": components["schemas"]["UserResponseDto"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UserUpdateDto"];
                    "text/json": components["schemas"]["UserUpdateDto"];
                    "application/*+json": components["schemas"]["UserUpdateDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users/by-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    email?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserResponseDto"];
                        "application/json": components["schemas"]["UserResponseDto"];
                        "text/json": components["schemas"]["UserResponseDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users/{userId}/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["OrganizationDto"][];
                        "application/json": components["schemas"]["OrganizationDto"][];
                        "text/json": components["schemas"]["OrganizationDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users/{userId}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserRole"];
                        "application/json": components["schemas"]["UserRole"];
                        "text/json": components["schemas"]["UserRole"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users/{userId}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EventResponseDto"][];
                        "application/json": components["schemas"]["EventResponseDto"][];
                        "text/json": components["schemas"]["EventResponseDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users/by-role/{role}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    role: components["schemas"]["UserRole"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserResponseDto"][];
                        "application/json": components["schemas"]["UserResponseDto"][];
                        "text/json": components["schemas"]["UserResponseDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users/by-organization/{organizationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    organizationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserResponseDto"][];
                        "application/json": components["schemas"]["UserResponseDto"][];
                        "text/json": components["schemas"]["UserResponseDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ActionCreateDto: {
            type: components["schemas"]["ActionType"];
            details: string;
            /** Format: uuid */
            flowId?: string | null;
        };
        ActionDetailedDto: {
            /** Format: uuid */
            id?: string;
            type?: components["schemas"]["ActionType"];
            details?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: uuid */
            flowId?: string | null;
            flow?: components["schemas"]["FlowBasicDto"];
        };
        ActionDto: {
            /** Format: uuid */
            id?: string;
            type?: components["schemas"]["ActionType"];
            details?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: uuid */
            flowId?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        ActionType: 0 | 1 | 2 | 3;
        ActionUpdateDto: {
            /** Format: uuid */
            id: string;
            type?: components["schemas"]["ActionType"];
            details?: string | null;
        };
        AgendaEntryCreateDto: {
            title: string;
            description?: string | null;
            /** Format: date-time */
            start: string;
            /** Format: date-time */
            end: string;
            /** Format: uuid */
            eventId: string;
        };
        AgendaEntryDto: {
            /** Format: uuid */
            id?: string;
            title?: string | null;
            description?: string | null;
            /** Format: date-time */
            start?: string;
            /** Format: date-time */
            end?: string;
            /** Format: uuid */
            eventId?: string;
            event?: components["schemas"]["EventBasicDto"];
        };
        AgendaEntryUpdateDto: {
            /** Format: uuid */
            id: string;
            title?: string | null;
            description?: string | null;
            /** Format: date-time */
            start?: string | null;
            /** Format: date-time */
            end?: string | null;
        };
        AgendaItemDto: {
            /** Format: uuid */
            id?: string;
            title?: string | null;
            description?: string | null;
            /** Format: date-time */
            startTime?: string;
            /** Format: date-time */
            endTime?: string;
            /** Format: uuid */
            speakerId?: string | null;
            speakerName?: string | null;
        };
        EventAttendeeDto: {
            /** Format: uuid */
            userId?: string;
            userName?: string | null;
            profilePicture?: string | null;
            /** Format: date-time */
            registeredAt?: string;
            attended?: boolean;
        };
        EventBasicDetailedDto: {
            /** Format: uuid */
            id?: string;
            title?: string | null;
            /** Format: date-time */
            date?: string | null;
            description?: string | null;
            location?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            image?: string | null;
            category?: components["schemas"]["EventCategory"];
            status?: components["schemas"]["EventStatus"];
            /** Format: date-time */
            start?: string | null;
            /** Format: date-time */
            end?: string | null;
            /** Format: int32 */
            attendeeCount?: number;
            /** Format: int32 */
            agendaItemCount?: number;
            creator?: components["schemas"]["UserDto"];
            updater?: components["schemas"]["UserDto"];
            attendees?: components["schemas"]["EventAttendeeDto"][] | null;
            agendaItems?: components["schemas"]["AgendaItemDto"][] | null;
        };
        EventBasicDto: {
            /** Format: uuid */
            id?: string;
            title?: string | null;
            /** Format: date-time */
            date?: string | null;
            description?: string | null;
            location?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            image?: string | null;
            category?: components["schemas"]["EventCategory"];
            status?: components["schemas"]["EventStatus"];
            /** Format: date-time */
            start?: string | null;
            /** Format: date-time */
            end?: string | null;
            /** Format: int32 */
            attendeeCount?: number;
            /** Format: int32 */
            agendaItemCount?: number;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        EventCategory: 0 | 1 | 2 | 3 | 4;
        EventCreateDto: {
            title: string;
            /** Format: uuid */
            organizationId: string;
            /** Format: date-time */
            date?: string | null;
            description?: string | null;
            location?: string | null;
            /** Format: uuid */
            createdBy: string;
            /** Format: uuid */
            updatedBy: string;
            image?: string | null;
            category?: components["schemas"]["EventCategory"];
            status?: components["schemas"]["EventStatus"];
            /** Format: date-time */
            start?: string | null;
            /** Format: date-time */
            end?: string | null;
        };
        EventResponseDto: {
            /** Format: uuid */
            id?: string;
            title?: string | null;
            description?: string | null;
            location?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            image?: string | null;
            category?: components["schemas"]["EventCategory"];
            status?: components["schemas"]["EventStatus"];
            /** Format: date-time */
            start?: string | null;
            /** Format: date-time */
            end?: string | null;
            creator?: components["schemas"]["UserDto"];
            updater?: components["schemas"]["UserDto"];
            /** Format: int32 */
            attendeeCount?: number;
            /** Format: int32 */
            agendaItemCount?: number;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        EventStatus: 0 | 1 | 2 | 3 | 4;
        EventStatusDto: {
            status: components["schemas"]["EventStatus"];
            /** Format: uuid */
            updatedBy: string;
        };
        EventUpdateDto: {
            /** Format: uuid */
            id: string;
            title?: string | null;
            /** Format: date-time */
            date?: string | null;
            description?: string | null;
            location?: string | null;
            /** Format: uuid */
            updatedBy: string;
            image?: string | null;
            category?: components["schemas"]["EventCategory"];
            status?: components["schemas"]["EventStatus"];
            /** Format: date-time */
            start?: string | null;
            /** Format: date-time */
            end?: string | null;
        };
        FileDetailedDto: {
            id?: string | null;
            url?: string | null;
            type?: components["schemas"]["FileType"];
            /** Format: date-time */
            uploadedAt?: string;
            originalName?: string | null;
            contentType?: string | null;
            /** Format: int64 */
            sizeInBytes?: number;
            uploader?: components["schemas"]["UserDto"];
        };
        FileDto: {
            id?: string | null;
            url?: string | null;
            type?: components["schemas"]["FileType"];
            /** Format: date-time */
            uploadedAt?: string;
            originalName?: string | null;
            contentType?: string | null;
            /** Format: int64 */
            sizeInBytes?: number;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        FileType: 0 | 1 | 2 | 3;
        FileUpdateDto: {
            id: string;
            originalName?: string | null;
        };
        FlowBasicDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            description?: string | null;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: uuid */
            createdBy?: string;
            /** Format: uuid */
            updatedBy?: string;
        };
        FlowCreateDto: {
            name: string;
            description?: string | null;
            /** Format: uuid */
            createdBy: string;
            /** Format: uuid */
            updatedBy: string;
        };
        FlowDetailedDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            description?: string | null;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: uuid */
            createdBy?: string;
            /** Format: uuid */
            updatedBy?: string;
            creator?: components["schemas"]["UserDto"];
            updater?: components["schemas"]["UserDto"];
            triggers?: components["schemas"]["TriggerDto"][] | null;
            actions?: components["schemas"]["ActionDto"][] | null;
        };
        FlowResponseDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            description?: string | null;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: uuid */
            createdBy?: string;
            /** Format: uuid */
            updatedBy?: string;
            creator?: components["schemas"]["UserDto"];
            updater?: components["schemas"]["UserDto"];
        };
        FlowStatusDto: {
            isActive?: boolean;
            /** Format: uuid */
            updatedBy?: string;
        };
        FlowUpdateDto: {
            /** Format: uuid */
            id: string;
            name: string;
            description?: string | null;
            /** Format: uuid */
            updatedBy: string;
        };
        OrganizationCreateDto: {
            name: string;
            address?: string | null;
            description?: string | null;
            /** Format: uri */
            website?: string | null;
            profilePicture?: string | null;
            /** Format: uuid */
            createdBy: string;
        };
        OrganizationDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            profilePicture?: string | null;
        };
        OrganizationResponseDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            address?: string | null;
            description?: string | null;
            profilePicture?: string | null;
            website?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            creator?: components["schemas"]["UserDto"];
            updater?: components["schemas"]["UserDto"];
            /** Format: int32 */
            memberCount?: number;
        };
        OrganizationUpdateDto: {
            name?: string | null;
            address?: string | null;
            description?: string | null;
            /** Format: uri */
            website?: string | null;
            /** Format: uri */
            profilePicture?: string | null;
        };
        TriggerCreateDto: {
            type: components["schemas"]["TriggerType"];
            details?: string | null;
            /** Format: uuid */
            flowId: string;
        };
        TriggerDetailedDto: {
            /** Format: uuid */
            id?: string;
            type?: components["schemas"]["TriggerType"];
            details?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: uuid */
            flowId?: string;
            /** Format: uuid */
            organizationId?: string;
            flow?: components["schemas"]["FlowBasicDto"];
        };
        TriggerDto: {
            /** Format: uuid */
            id?: string;
            type?: components["schemas"]["TriggerType"];
            details?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: uuid */
            flowId?: string;
            /** Format: uuid */
            organizationId?: string;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        TriggerType: 0 | 1 | 2 | 3;
        TriggerUpdateDto: {
            /** Format: uuid */
            id: string;
            type: components["schemas"]["TriggerType"];
            details?: string | null;
        };
        UserCreateDto: {
            /** Format: email */
            email: string;
            firstName: string;
            lastName: string;
            password: string;
        };
        UserDto: {
            /** Format: uuid */
            id?: string;
            email?: string | null;
            firstName?: string | null;
            lastName?: string | null;
            readonly fullName?: string | null;
            profilePicture?: string | null;
        };
        UserResponseDto: {
            /** Format: uuid */
            id?: string;
            email?: string | null;
            firstName?: string | null;
            lastName?: string | null;
            readonly fullName?: string | null;
            profilePicture?: string | null;
            /** Format: date-time */
            createdAt?: string;
            organization?: components["schemas"]["OrganizationDto"];
            role?: components["schemas"]["UserRole"];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        UserRole: 0 | 1 | 2;
        UserUpdateDto: {
            firstName?: string | null;
            lastName?: string | null;
            /** Format: uri */
            profilePicture?: string | null;
            /** Format: password */
            newPassword?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
